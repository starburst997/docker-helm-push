name: "Docker Helm Push"
description: "Build and push Docker images with Helm charts to container registries"
author: "JD Boivin"
branding:
  icon: "package"
  color: "blue"

inputs:
  registry:
    description: "Container registry URL"
    required: false
    default: "ghcr.io"

  username:
    description: "Username or organization (defaults to repository owner)"
    required: false
    default: ${{ github.repository_owner }}

  image-name:
    description: "Name of the Docker image"
    required: false
    default: ${{ github.event.repository.name }}

  version:
    description: "Version tag for the image (e.g., v1.2.3, v1.2.3-dev)"
    required: true

  additional-tags:
    description: 'Additional tags to apply (comma-separated, e.g., "latest,dev")'
    required: false
    default: "latest"

  dockerfile:
    description: "Path to the Dockerfile"
    required: false
    default: "./Dockerfile"

  context:
    description: "Build context path"
    required: false
    default: "./"

  platforms:
    description: "Target platforms for build"
    required: false
    default: "linux/amd64"

  helm-chart-path:
    description: "Path to Helm chart directory"
    required: false
    default: "charts"

  push-helm:
    description: "Whether to push Helm chart"
    required: false
    default: "true"

  build-args:
    description: "List of build arguments (JSON array of strings)"
    required: false
    default: "[]"

  version-breakdown:
    description: "Enable semantic version breakdown (v1.2.3 -> v1.2, v1)"
    required: false
    default: "true"

  token:
    description: "GitHub token for authentication (defaults to github.token)"
    required: false
    default: ""

  git-push:
    description: "Push commits and tags to remote repository"
    required: false
    default: "false"

  make-public:
    description: "Make Docker and Helm packages public (GitHub Container Registry only)"
    required: false
    default: "false"

  cache:
    description: "Enable Docker build caching for faster builds"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Parse Version
      id: version
      shell: bash
      run: |
        VERSION="${{ inputs.version }}"
        echo "full_version=$VERSION" >> $GITHUB_OUTPUT

        # Initialize tags array with the main version
        TAGS="${{ inputs.registry }}/${{ inputs.username }}/${{ inputs.image-name }}:$VERSION"

        # Check if version breakdown is enabled for Docker tags only
        if [[ "${{ inputs.version-breakdown }}" == "true" ]]; then
          # Extract version parts and suffix, detect if 'v' prefix exists
          if [[ "$VERSION" =~ ^(v?)([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
            V_PREFIX="${BASH_REMATCH[1]}"
            MAJOR="${BASH_REMATCH[2]}"
            MINOR="${BASH_REMATCH[3]}"
            PATCH="${BASH_REMATCH[4]}"
            SUFFIX="${BASH_REMATCH[5]}"

            # Build additional tags preserving the 'v' prefix from input
            MAJOR_TAG="${V_PREFIX}${MAJOR}${SUFFIX}"
            MINOR_TAG="${V_PREFIX}${MAJOR}.${MINOR}${SUFFIX}"

            # Add major and minor tags for Docker only
            TAGS="$TAGS,${{ inputs.registry }}/${{ inputs.username }}/${{ inputs.image-name }}:${MINOR_TAG}"
            TAGS="$TAGS,${{ inputs.registry }}/${{ inputs.username }}/${{ inputs.image-name }}:${MAJOR_TAG}"
          fi
        fi

        # Add additional tags if specified
        if [[ -n "${{ inputs.additional-tags }}" ]]; then
          IFS=',' read -ra ADDITIONAL <<< "${{ inputs.additional-tags }}"
          for tag in "${ADDITIONAL[@]}"; do
            # Trim whitespace
            tag=$(echo "$tag" | xargs)
            if [[ -n "$tag" ]]; then
              TAGS="$TAGS,${{ inputs.registry }}/${{ inputs.username }}/${{ inputs.image-name }}:$tag"
            fi
          done
        fi

        echo "tags=$TAGS" >> $GITHUB_OUTPUT
        # Helm should only use the original version (no breakdown) and strip 'v' prefix
        HELM_VERSION="${VERSION#v}"
        echo "helm_version=$HELM_VERSION" >> $GITHUB_OUTPUT

    - name: Check Dockerfile
      id: dockerfile-check
      shell: bash
      run: |
        cd "${{ inputs.context }}"

        if [[ -f "${{ inputs.dockerfile }}" ]]; then
          echo "Dockerfile found at: ${{ inputs.dockerfile }} (in context: ${{ inputs.context }})"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Dockerfile not found at: ${{ inputs.dockerfile }} (in context: ${{ inputs.context }})"
          echo "Skipping Docker build and push"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Prepare Build Arguments
      id: build-args
      if: steps.dockerfile-check.outputs.exists == 'true'
      shell: bash
      run: |
        BUILD_ARGS=""

        # Process build arguments
        if [[ "${{ inputs.build-args }}" != "[]" ]]; then
          echo "${{ inputs.build-args }}" | jq -r '.[]' | while IFS= read -r arg; do
            if [[ -n "$arg" ]]; then
              echo "--build-arg $arg"
            fi
          done > /tmp/build_args.txt
        else
          touch /tmp/build_args.txt
        fi

        # Combine all build arguments
        BUILD_ARGS=$(cat /tmp/build_args.txt | tr '\n' ' ')
        echo "args=$BUILD_ARGS" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.token || github.token }}

    - name: Build and Push Docker Image
      if: steps.dockerfile-check.outputs.exists == 'true'
      shell: bash
      run: |
        # Split tags into array for docker buildx
        IFS=',' read -ra TAG_ARRAY <<< "${{ steps.version.outputs.tags }}"

        # Reverse the array to ensure full version is the primary tag
        REVERSED_TAGS=()
        for ((i=${#TAG_ARRAY[@]}-1; i>=0; i--)); do
          REVERSED_TAGS+=("${TAG_ARRAY[$i]}")
        done

        TAG_FLAGS=""
        for tag in "${REVERSED_TAGS[@]}"; do
          TAG_FLAGS="$TAG_FLAGS --tag $tag"
        done

        # Configure cache flags if caching is enabled
        CACHE_FLAGS=""
        if [[ "${{ inputs.cache }}" == "true" ]]; then
          CACHE_FLAGS="--cache-from type=gha --cache-to type=gha,mode=max"
        fi

        cd "${{ inputs.context }}"

        # Build and push
        docker buildx build \
          --platform ${{ inputs.platforms }} \
          --file ${{ inputs.dockerfile }} \
          --push \
          --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
          $TAG_FLAGS \
          $CACHE_FLAGS \
          ${{ steps.build-args.outputs.args }} \
          ./

    - name: Check Helm Chart Path
      id: helm-check
      shell: bash
      run: |
        if [[ -d "${{ inputs.helm-chart-path }}" ]]; then
          echo "Helm chart directory found at: ${{ inputs.helm-chart-path }}"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Helm chart directory not found at: ${{ inputs.helm-chart-path }}"
          echo "Skipping Helm chart packaging and push"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Helm
      if: inputs.push-helm == 'true' && steps.helm-check.outputs.exists == 'true'
      uses: azure/setup-helm@v4

    - name: Package and Push Helm Charts
      if: inputs.push-helm == 'true' && steps.helm-check.outputs.exists == 'true'
      shell: bash
      run: |
        # Use only the original version for Helm chart (no version breakdown, 'v' prefix stripped)
        VERSION="${{ steps.version.outputs.helm_version }}"

        echo "Packaging Helm charts with version: $VERSION"

        # Loop through all charts in the specified directory
        for chart_dir in ${{ inputs.helm-chart-path }}/*/; do
          if [[ -d "$chart_dir" ]]; then
            chart_name=$(basename "$chart_dir")
            echo "Processing chart: $chart_name"

            # Update dependencies
            helm dependency update "$chart_dir"

            # Package the chart
            helm package "$chart_dir" \
              --app-version=$VERSION \
              --version=$VERSION

            # Push to registry
            helm push "${chart_name}-${VERSION}.tgz" \
              oci://${{ inputs.registry }}/${{ inputs.username }}/charts

            echo "Successfully pushed $chart_name version $VERSION"
          fi
        done

    - name: Make Packages Public
      if: inputs.make-public == 'true' && inputs.registry == 'ghcr.io'
      shell: bash
      run: |
        echo "Making packages public..."

        # Make Docker image public if it was built
        if [[ "${{ steps.dockerfile-check.outputs.exists }}" == "true" ]]; then
          echo "Setting Docker image visibility to public"
          curl -X PATCH \
            -H "Authorization: Bearer ${{ inputs.token || github.token }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/packages/container/${{ inputs.username }}%2F${{ inputs.image-name }}/visibility \
            -d '{"visibility":"public"}' || echo "Failed to set Docker image visibility (may already be public)"
        fi

        # Make Helm charts public if they were pushed
        if [[ "${{ inputs.push-helm }}" == "true" ]] && [[ "${{ steps.helm-check.outputs.exists }}" == "true" ]]; then
          echo "Setting Helm chart visibility to public"
          for chart_dir in ${{ inputs.helm-chart-path }}/*/; do
            if [[ -d "$chart_dir" ]]; then
              chart_name=$(basename "$chart_dir")
              curl -X PATCH \
                -H "Authorization: Bearer ${{ inputs.token || github.token }}" \
                -H "Accept: application/vnd.github+json" \
                https://api.github.com/user/packages/container/${{ inputs.username }}%2Fcharts%2F${chart_name}/visibility \
                -d '{"visibility":"public"}' || echo "Failed to set $chart_name visibility (may already be public)"
            fi
          done
        fi

    - name: Push commits and tags
      if: inputs.git-push == 'true'
      shell: bash
      run: |
        echo "🚀 Pushing all changes and tags to remote repository"

        # Push tags only
        git push --force origin --tags

        # Push all changes (ignore detached HEAD state in PRs)
        git push || echo "⚠️  Skipping commit push (detached HEAD state - common in PR context)"

        echo "✅ Successfully pushed tags"
